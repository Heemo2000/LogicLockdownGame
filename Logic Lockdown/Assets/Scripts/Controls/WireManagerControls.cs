//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/WireManagerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.Controls
{
    public partial class @WireManagerControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @WireManagerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""WireManagerControls"",
    ""maps"": [
        {
            ""name"": ""WireManagerActionMap"",
            ""id"": ""32b94760-852a-41e8-a7aa-ab7aa458681d"",
            ""actions"": [
                {
                    ""name"": ""ScreenClick"",
                    ""type"": ""Button"",
                    ""id"": ""0e84589b-68c0-4a7e-bab1-a2a0cd72fde9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PosOnScreen"",
                    ""type"": ""Value"",
                    ""id"": ""7784109e-ec6e-4c68-ab0f-72f75fb88750"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RemoveWire"",
                    ""type"": ""Button"",
                    ""id"": ""9e89543d-8e90-41d1-8526-2876920d4f82"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3691e031-b10b-45c4-94ce-d3cd92378c97"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1376697e-65a8-4f65-ba58-e82be64bb456"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PosOnScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29d2af39-1d1b-4f80-bb27-db41816dc495"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RemoveWire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // WireManagerActionMap
            m_WireManagerActionMap = asset.FindActionMap("WireManagerActionMap", throwIfNotFound: true);
            m_WireManagerActionMap_ScreenClick = m_WireManagerActionMap.FindAction("ScreenClick", throwIfNotFound: true);
            m_WireManagerActionMap_PosOnScreen = m_WireManagerActionMap.FindAction("PosOnScreen", throwIfNotFound: true);
            m_WireManagerActionMap_RemoveWire = m_WireManagerActionMap.FindAction("RemoveWire", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // WireManagerActionMap
        private readonly InputActionMap m_WireManagerActionMap;
        private List<IWireManagerActionMapActions> m_WireManagerActionMapActionsCallbackInterfaces = new List<IWireManagerActionMapActions>();
        private readonly InputAction m_WireManagerActionMap_ScreenClick;
        private readonly InputAction m_WireManagerActionMap_PosOnScreen;
        private readonly InputAction m_WireManagerActionMap_RemoveWire;
        public struct WireManagerActionMapActions
        {
            private @WireManagerControls m_Wrapper;
            public WireManagerActionMapActions(@WireManagerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @ScreenClick => m_Wrapper.m_WireManagerActionMap_ScreenClick;
            public InputAction @PosOnScreen => m_Wrapper.m_WireManagerActionMap_PosOnScreen;
            public InputAction @RemoveWire => m_Wrapper.m_WireManagerActionMap_RemoveWire;
            public InputActionMap Get() { return m_Wrapper.m_WireManagerActionMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(WireManagerActionMapActions set) { return set.Get(); }
            public void AddCallbacks(IWireManagerActionMapActions instance)
            {
                if (instance == null || m_Wrapper.m_WireManagerActionMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_WireManagerActionMapActionsCallbackInterfaces.Add(instance);
                @ScreenClick.started += instance.OnScreenClick;
                @ScreenClick.performed += instance.OnScreenClick;
                @ScreenClick.canceled += instance.OnScreenClick;
                @PosOnScreen.started += instance.OnPosOnScreen;
                @PosOnScreen.performed += instance.OnPosOnScreen;
                @PosOnScreen.canceled += instance.OnPosOnScreen;
                @RemoveWire.started += instance.OnRemoveWire;
                @RemoveWire.performed += instance.OnRemoveWire;
                @RemoveWire.canceled += instance.OnRemoveWire;
            }

            private void UnregisterCallbacks(IWireManagerActionMapActions instance)
            {
                @ScreenClick.started -= instance.OnScreenClick;
                @ScreenClick.performed -= instance.OnScreenClick;
                @ScreenClick.canceled -= instance.OnScreenClick;
                @PosOnScreen.started -= instance.OnPosOnScreen;
                @PosOnScreen.performed -= instance.OnPosOnScreen;
                @PosOnScreen.canceled -= instance.OnPosOnScreen;
                @RemoveWire.started -= instance.OnRemoveWire;
                @RemoveWire.performed -= instance.OnRemoveWire;
                @RemoveWire.canceled -= instance.OnRemoveWire;
            }

            public void RemoveCallbacks(IWireManagerActionMapActions instance)
            {
                if (m_Wrapper.m_WireManagerActionMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IWireManagerActionMapActions instance)
            {
                foreach (var item in m_Wrapper.m_WireManagerActionMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_WireManagerActionMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public WireManagerActionMapActions @WireManagerActionMap => new WireManagerActionMapActions(this);
        public interface IWireManagerActionMapActions
        {
            void OnScreenClick(InputAction.CallbackContext context);
            void OnPosOnScreen(InputAction.CallbackContext context);
            void OnRemoveWire(InputAction.CallbackContext context);
        }
    }
}
