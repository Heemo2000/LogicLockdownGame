//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/CrosswordManagerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.Controls
{
    public partial class @CrosswordManagerControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @CrosswordManagerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""CrosswordManagerControls"",
    ""maps"": [
        {
            ""name"": ""Crossword Action Map"",
            ""id"": ""396ae0ba-d712-49a2-b466-e466f6882be0"",
            ""actions"": [
                {
                    ""name"": ""PosOnScreen"",
                    ""type"": ""Value"",
                    ""id"": ""b3989107-fbe4-4a38-8af9-dd9810e59585"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0c05bfba-44ee-43a3-8758-6c714e1e80aa"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PosOnScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Crossword Action Map
            m_CrosswordActionMap = asset.FindActionMap("Crossword Action Map", throwIfNotFound: true);
            m_CrosswordActionMap_PosOnScreen = m_CrosswordActionMap.FindAction("PosOnScreen", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Crossword Action Map
        private readonly InputActionMap m_CrosswordActionMap;
        private List<ICrosswordActionMapActions> m_CrosswordActionMapActionsCallbackInterfaces = new List<ICrosswordActionMapActions>();
        private readonly InputAction m_CrosswordActionMap_PosOnScreen;
        public struct CrosswordActionMapActions
        {
            private @CrosswordManagerControls m_Wrapper;
            public CrosswordActionMapActions(@CrosswordManagerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @PosOnScreen => m_Wrapper.m_CrosswordActionMap_PosOnScreen;
            public InputActionMap Get() { return m_Wrapper.m_CrosswordActionMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CrosswordActionMapActions set) { return set.Get(); }
            public void AddCallbacks(ICrosswordActionMapActions instance)
            {
                if (instance == null || m_Wrapper.m_CrosswordActionMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CrosswordActionMapActionsCallbackInterfaces.Add(instance);
                @PosOnScreen.started += instance.OnPosOnScreen;
                @PosOnScreen.performed += instance.OnPosOnScreen;
                @PosOnScreen.canceled += instance.OnPosOnScreen;
            }

            private void UnregisterCallbacks(ICrosswordActionMapActions instance)
            {
                @PosOnScreen.started -= instance.OnPosOnScreen;
                @PosOnScreen.performed -= instance.OnPosOnScreen;
                @PosOnScreen.canceled -= instance.OnPosOnScreen;
            }

            public void RemoveCallbacks(ICrosswordActionMapActions instance)
            {
                if (m_Wrapper.m_CrosswordActionMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICrosswordActionMapActions instance)
            {
                foreach (var item in m_Wrapper.m_CrosswordActionMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CrosswordActionMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CrosswordActionMapActions @CrosswordActionMap => new CrosswordActionMapActions(this);
        public interface ICrosswordActionMapActions
        {
            void OnPosOnScreen(InputAction.CallbackContext context);
        }
    }
}
